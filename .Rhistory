cPal <- colorNumeric(palette = "Oranges",domain=clean_gb$salary_max)
leaflet(clean_gb) %>% addTiles() %>%
addCircleMarkers(data=clean_gb,lng=~longitude,
lat=~latitude,
clusterOptions = markerClusterOptions(),
popup = pop_gb,
fillColor = ~cPal(clean_gb$salary_max),
stroke = FALSE,fillOpacity = 0.9)%>%
addLegend("bottomright", pal = cPal, values = ~salary_max,title = "salary ()",opacity = 1)
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
#UKM
output$UKMC <- renderLeaflet({
pop_gb <- paste("<strong>Job title</strong> : ",clean_gb$title,"<br/>",
"<strong>Salary</strong> : ￡",clean_gb$salary_min,"~ ￡",clean_gb$salary_max,"<br/>",
"<strong>Summary</strong> : ",clean_gb$description,"<br/>")
cPal <- colorNumeric(palette = "Oranges",domain=clean_gb$salary_max)
leaflet(clean_gb) %>% addTiles() %>%
addCircleMarkers(data=clean_gb,lng=~longitude,
lat=~latitude,
clusterOptions = markerClusterOptions(),
popup = pop_gb,
fillColor = ~cPal(clean_gb$salary_max),
stroke = FALSE,fillOpacity = 0.9)%>%
addLegend("bottomright", pal = cPal, values = ~salary_max,title = "salary (￡)",opacity = 1)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- dashboardPage(
# Application title
dashboardHeader(title="Jobs"),
# Sidebar with a slider input for number of bins
dashboardSidebar(
sidebarMenu(
menuItem("Jobs in UK",
menuSubItem("maps and salary"),tabName = "ukm"),
menuItem("Jobs in US",
menuSubItem("maps"),tabName = "usm")
)
),
dashboardBody(
tabItems(
tabItem(
tabName = "ukm",
fluidRow(
box(width = 8,
title = "Mapping",
id = "tebset1",
leafletOutput("UKMC",height = 650)),
box(title = "Control"),
box()
)
),
tabItem(
tabName = "usm",
fluidRow(
tabBox(),
box(),
box()
)
)
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
#UKM
output$UKMC <- renderLeaflet({
pop_gb <- paste("<strong>Job title</strong> : ",clean_gb$title,"<br/>",
"<strong>Salary</strong> : ￡",clean_gb$salary_min,"~ ￡",clean_gb$salary_max,"<br/>",
"<strong>Summary</strong> : ",clean_gb$description,"<br/>")
cPal <- colorNumeric(palette = "Oranges",domain=clean_gb$salary_max)
leaflet(clean_gb) %>% addTiles() %>%
addCircleMarkers(data=clean_gb,lng=~longitude,
lat=~latitude,
clusterOptions = markerClusterOptions(),
popup = pop_gb,
fillColor = ~cPal(clean_gb$salary_max),
stroke = FALSE,fillOpacity = 0.9)%>%
addLegend("bottomright", pal = cPal, values = ~salary_max,title = "salary (￡)",opacity = 1)
})
runApp('Shiny/jobs')
runApp('Shiny/jobs')
unique(clean_gb$state)
quantile(clean_gb$salary_max)
runApp('Shiny/jobs')
runApp('Shiny/jobs')
leaflet(clean_gb) %>% addTiles() %>%
addCircleMarkers(data=clean_gb,lng=~longitude,
lat=~latitude,
clusterOptions = markerClusterOptions(),
popup = pop_gb,
fillColor = ~cPal(clean_gb$salary_max),
stroke = FALSE,fillOpacity = 0.9)%>%
addLegend("bottomright", pal = cPal, values = ~salary_max,title = "salary (￡)",opacity = 1)
leaflet(clean_gb) %>% addTiles() %>%
addCircleMarkers(data=clean_gb,lng=~longitude,
lat=~latitude,
clusterOptions = markerClusterOptions(),
popup = pop_gb,
fillColor = ~cPal(clean_gb$salary_max),
stroke = FALSE,fillOpacity = 0.9)%>%
addLegend("bottomright", pal = cPal, values = ~salary_max,title = "salary (￡)",opacity = 1)
runApp('Shiny/jobs')
runApp('Shiny/jobs')
runApp('Shiny/jobs')
runApp('Shiny/jobs')
pop_gb <- paste("<strong>Job title</strong> : ",clean_gb$title,"<br/>",
"<strong>Salary</strong> : ￡",clean_gb$salary_min,"~ ￡",clean_gb&salary_max,"<br/>",
"<strong>Summary</strong> : ",clean_gb$description,"<br/>")
pop_gb <- paste("<strong>Job title</strong> : ",clean_gb$title,"<br/>",
"<strong>Salary</strong> : ￡",clean_gb$salary_min,"~ ￡",clean_gb&salary_max,"<br/>",
"<strong>Summary</strong> : ",clean_gb$description,"<br/>")
full <- read_csv("df.csv")
full_us <- read_csv("full_us.csv")
clean_gb <- read_csv("clean_gb.csv")
clean_gb$description <- str_replace_all(clean_gb$description, "�","")
clean_gb$title <- str_replace_all(clean_gb$title, "�","")
clean_gb$detail <- str_replace_all(clean_gb$detail, "�","")
runApp('Shiny/jobs')
runApp('Shiny/jobs')
runApp('Shiny/jobs')
runApp('Shiny/jobs')
clean_gb %<>% filter(salary_min>=input$range[1]&salary_max<=input$range[2])
pop_gb <- paste("<strong>Job title</strong> : ",clean_gb$title,"<br/>",
"<strong>Salary</strong> :",clean_gb$salary_min,"~",clean_gb&salary_max,"<br/>",
"<strong>Summary</strong> : ",clean_gb$description,"<br/>")
cPal <- colorNumeric(palette = "Oranges",domain=clean_gb$salary_max)
if(input$State=="All"){
leaflet(clean_gb) %>% addTiles() %>%
addCircleMarkers(data=clean_gb,lng=~longitude,
lat=~latitude,
clusterOptions = markerClusterOptions(),
popup = pop_gb,
fillColor = ~cPal(clean_gb$salary_max),
stroke = FALSE,fillOpacity = 0.9)%>%
addLegend("bottomright", pal = cPal, values = ~salary_max,title = "salary",opacity = 1)
}else{
clean_gb %<>% filter(clean_gb$state==input$State)
leaflet(clean_gb) %>% addTiles() %>%
addCircleMarkers(data=clean_gb,lng=~longitude,
lat=~latitude,
clusterOptions = markerClusterOptions(),
popup = pop_gb,
fillColor = ~cPal(clean_gb$salary_max),
stroke = FALSE,fillOpacity = 0.9)%>%
addLegend("bottomright", pal = cPal, values = ~salary_max,title = "salary (￡)",opacity = 1)
}
#UKM
output$UKMC <- renderLeaflet({
clean_gb %<>% filter(salary_min>=input$range[1]&salary_max<=input$range[2])
pop_gb <- paste("<strong>Job title</strong> : ",clean_gb$title,"<br/>",
"<strong>Salary</strong> :",clean_gb$salary_min,"~",clean_gb&salary_max,"<br/>",
"<strong>Summary</strong> : ",clean_gb$description,"<br/>")
cPal <- colorNumeric(palette = "Oranges",domain=clean_gb$salary_max)
if(input$State=="All"){
leaflet(clean_gb) %>% addTiles() %>%
addCircleMarkers(data=clean_gb,lng=~longitude,
lat=~latitude,
clusterOptions = markerClusterOptions(),
popup = pop_gb,
fillColor = ~cPal(clean_gb$salary_max),
stroke = FALSE,fillOpacity = 0.9)%>%
addLegend("bottomright", pal = cPal, values = ~salary_max,title = "salary",opacity = 1)
}else{
clean_gb %<>% filter(clean_gb$state==input$State)
leaflet(clean_gb) %>% addTiles() %>%
addCircleMarkers(data=clean_gb,lng=~longitude,
lat=~latitude,
clusterOptions = markerClusterOptions(),
popup = pop_gb,
fillColor = ~cPal(clean_gb$salary_max),
stroke = FALSE,fillOpacity = 0.9)%>%
addLegend("bottomright", pal = cPal, values = ~salary_max,title = "salary (￡)",opacity = 1)
}
})
pop_gb <- paste("<strong>Job title</strong> : ",clean_gb$title,"<br/>",
"<strong>Salary</strong> :",clean_gb$salary_min,"~",clean_gb&salary_max,"<br/>",
"<strong>Summary</strong> : ",clean_gb$description,"<br/>")
pop_gb <- paste("<strong>Job title</strong> : ",clean_gb$title,"<br/>",
"<strong>Salary</strong> :",clean_gb$salary_min,"~",clean_gb$salary_max,"<br/>",
"<strong>Summary</strong> : ",clean_gb$description,"<br/>")
runApp('Shiny/jobs')
runApp('Shiny/jobs')
library(shiny)
library(httr)
library(rlist)
library(tidyverse)
library(readr)
library(magrittr)
library(stringr)
library(tidytext)
data(stop_words)
library(scales)
library(maps)
library(leaflet)
library(shinydashboard)
Sys.setlocale("LC_CTYPE","eng")
clean_gb <- read_csv("clean_gb.csv")
clean_gb$description <- str_replace_all(clean_gb$description, "�","")
clean_gb$title <- str_replace_all(clean_gb$title, "�","")
clean_gb$detail <- str_replace_all(clean_gb$detail, "�","")
# UK maps
runApp('Shiny/jobs')
runApp('Shiny/jobs')
runApp('Shiny/jobs')
indeed <- read_csv("indeed.csv")
indeed <- indeed[1:770,]
# adzuna vs indeed
tidygb_desc <- clean_gb[,c(1,15)] %>%
unnest_tokens(word, detail)
tidygb_desc <- tidygb_desc %>%
anti_join(stop_words) #%>% filter(!(word %in% c("data","scientist","de","und","en","di","scientists","science","la","je","als","des","du","een","der","le","00e4")))
tidygb_desc %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL)
tidygb_desc %>% filter(word=="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL)
tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL)
adzuna_text <- tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL)
View(indeed)
tidyin_desc <- unnest_tokens(word, description)
tidyin_desc <- indeed[,c(1,6)] %>%
unnest_tokens(word, description)
tidyin_desc <- tidyin_desc %>%
anti_join(stop_words) #%>% filter(!(word %in% c("data","scientist","de","und","en","di","scientists","science","la","je","als","des","du","een","der","le","00e4")))
indeed_text <- tidyin_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL)
indeed_text
indeed_text <- tidyin_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL,title = "Description in Indeed")+
# Define UI for application that draws a histogram
ui <- dashboardPage(
# Application title
dashboardHeader(title="Jobs"),
# Sidebar with a slider input for number of bins
dashboardSidebar(
sidebarMenu(
menuItem("Jobs in UK",
menuSubItem("maps and salary",tabName = "ukm")),
menuItem("Adzuna vs Indeed",
menuSubItem("maps",tabName = "usm"))
)
),
dashboardBody(
tabItems(
#first item
tabItem(
tabName = "ukm",
fluidRow(
box(width = 8,
title = "Mapping",
id = "tabset1",
leafletOutput("UKMC",height = 650)),
box(width = 4,
title = "Controls",
status = "warning",
footer = "If whole world map is showed, that means the state and year
you choosed has no hurricane disaster.",
solidHeader = T,
sliderInput("range","Range of years",min=0,max=168000,
value = c(0,168000)),
selectInput("State",
label = "Choose a state to display",
choices = c("All","South East England","London",
"South West England","Scotland",
"Yorkshire And The Humber",
"North West England","West Midlands",
"Northern Ireland","Wales","North East England"))),
box(width = 4,
title = "Tips",background = "olive",
solidHeader = TRUE,collapsible = TRUE,
div("1.Enlatge and click map to see more information."),
div("2.Click '-' to hide Tips"))
)
),
tabItem(
tabName = "usm",
fluidRow(
tabBox(),
box(),
box()
)
)
)
)
)
indeed_text <- tidyin_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL,title = "Description in Indeed")+
# Define UI for application that draws a histogram
ui <- dashboardPage(
# Application title
dashboardHeader(title="Jobs"),
# Sidebar with a slider input for number of bins
dashboardSidebar(
sidebarMenu(
menuItem("Jobs in UK",
menuSubItem("maps and salary",tabName = "ukm")),
menuItem("Adzuna vs Indeed",
menuSubItem("maps",tabName = "usm"))
)
),
dashboardBody(
tabItems(
#first item
tabItem(
tabName = "ukm",
fluidRow(
box(width = 8,
title = "Mapping",
id = "tabset1",
leafletOutput("UKMC",height = 650)),
box(width = 4,
title = "Controls",
status = "warning",
footer = "If whole world map is showed, that means the state and year
you choosed has no hurricane disaster.",
solidHeader = T,
sliderInput("range","Range of years",min=0,max=168000,
value = c(0,168000)),
selectInput("State",
label = "Choose a state to display",
choices = c("All","South East England","London",
"South West England","Scotland",
"Yorkshire And The Humber",
"North West England","West Midlands",
"Northern Ireland","Wales","North East England"))),
box(width = 4,
title = "Tips",background = "olive",
solidHeader = TRUE,collapsible = TRUE,
div("1.Enlatge and click map to see more information."),
div("2.Click '-' to hide Tips"))
)
),
tabItem(
tabName = "usm",
fluidRow(
tabBox(),
box(),
box()
)
)
)
)
)
tidyin_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL,title = "Description in Indeed")
library(gridExtra)
grid.arrange(adzuna_text,indeed_text,nrow=1)
a_vs_i <- grid.arrange(adzuna_text,indeed_text,nrow=1)
runApp('Shiny/jobs')
runApp('Shiny/jobs')
i
a_vs_i <- grid.arrange(adzuna_text,indeed_text,nrow=1)
runApp('Shiny/jobs')
runApp('Shiny/jobs')
indeed_text <- tidyin_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),width=1) +
geom_col() +
labs(y = NULL,title = "Description in Indeed")
tidyin_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),width=1) +
geom_col() +
labs(y = NULL,title = "Description in Indeed")
runApp('Shiny/jobs')
a_vs_i <- grid.arrange(adzuna_text,indeed_text,nrow=1,height=1.5)
a_vs_i <- grid.arrange(adzuna_text,indeed_text,nrow=1,height=1.5)
a_vs_i <- grid.arrange(adzuna_text,indeed_text,nrow=1,height=c(1,1))
runApp('Shiny/jobs')
runApp('Shiny/jobs')
adzuna_text <- tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Adzuna")
tidyin_desc <- indeed[,c(1,6)] %>%
unnest_tokens(word, description)
tidyin_desc <- tidyin_desc %>%
anti_join(stop_words) #%>% filter(!(word %in% c("data","scientist","de","und","en","di","scientists","science","la","je","als","des","du","een","der","le","00e4")))
indeed_text <- tidyin_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Indeed")
a_vs_i <- grid.arrange(adzuna_text,indeed_text,nrow=1)
runApp('Shiny/jobs')
adzuna_text <- tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Adzuna")+
theme(y.axis.size=10)
adzuna_text <- tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Adzuna")+
theme(axis.text.y=element_text(size=10))
tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Adzuna")+
theme(axis.text.y=element_text(size=10))
tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Adzuna")+
theme(axis.text.y=element_text(size=20))
tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Adzuna")+
theme(axis.text.y=element_text(size=10))
tidyin_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Indeed")
adzuna_text <- tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Adzuna")+
theme(axis.text.y=element_text(size=12))
tidygb_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 500) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Adzuna")+
theme(axis.text.y=element_text(size=12))
indeed_text <- tidyin_desc %>% filter(word!="data") %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word),height=650) +
geom_col() +
labs(y = NULL,title = "Description in Indeed")+
theme(axis.text.y=element_text(size=12))
